# -*- coding: utf-8 -*-
"""Spotify Dataset Preprocessing & Feature Engineering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/155PxzLNOm7G_D7VN_POzOYM0xzgact24

# Music Mood Classification
"""

import numpy as np
import pandas as pd
import seaborn as sns

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

data = pd.read_csv('~/Downloads/EmotionBasedMusicRecommendationSystem/EmotionBasedMusicRecommendationSystem/dataset/data_moods.csv')
data

# Check for missing values
missing_values = data.isnull().sum()
missing_values

# Select relevant features
selected_features = ['danceability', 'acousticness', 'energy', 'instrumentalness', 'liveness', 'valence', 'loudness', 'speechiness', 'tempo']
X = data[selected_features]
y = data['mood']

# Normalization
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Categorical Encoding
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split the Data
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)

# Train a Mode
from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the Model
from sklearn.metrics import classification_report

y_pred = model.predict(X_test)
report = classification_report(y_test, y_pred, target_names=label_encoder.classes_)
print(report)

# Add the predicted moods to the dataset
data['encoded_mood'] = label_encoder.transform(data['mood'])
data['predicted_mood'] = label_encoder.inverse_transform(model.predict(X_scaled))

# Save the updated dataset to a new CSV file
output_file_path = 'path_to_save_the_new_file/updated_data_moods.csv'
data.to_csv(output_file_path, index=False)

# Display the first few rows of the updated dataset
print(data[['name', 'album', 'artist', 'mood', 'predicted_mood']].head())

